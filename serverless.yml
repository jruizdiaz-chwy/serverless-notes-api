service: alpha-notes

# Create an optimized package for our functions
package:
  individually: true

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless commands.
  # Or fallsback to what we have set in the proovider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally.
  tableName: alpha-notes
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-1
  apiKeys:
    - alpha-notes-client

  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query 
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        # Restrict our IAM role permissions to
        # the specific table for the stage.
        Resource: "arn:aws:dynamodb:us-west-1:398398166530:table/alpha-notes"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
    create:
      handler: create.main
      events:
        - http:
            path: notes
            method: post
            cors: true
            private: true
    get:
      handler: get.main
      events:
        - http:
            path: notes/{id}
            method: get
            cors: true
            private: true
    list:
      handler: list.main
      events:
        - http:
            path: notes
            method: get
            cors: true
            private: true
    update:
      handler: update.main
      events:
        - http:
            path: notes/{id}
            method: put
            cors: true
            private: true
    delete:
      handler: delete.main
      events:
        - http:
            path: notes/{id}
            method: delete
            cors: true
            private: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}